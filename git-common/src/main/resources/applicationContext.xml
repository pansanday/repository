<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
        
	<!-- springmvc 注解驱动 -->
	<mvc:annotation-driven/>
	<!-- 包扫描器 -->
	<context:component-scan base-package="com.git.*"/>
	
	<!-- 配置视图解析器ModelAndView -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 逻辑名称的前缀 -->
		<property name="prefix" value="/view/"></property>
		<!-- 返回的逻辑名称的后缀 -->
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 拦截器配置 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 需拦截的地址 -->
			<!-- 一级目录 -->
			<mvc:mapping path="/*.do" />
			<mvc:mapping path="/*.ajax" />
			<mvc:mapping path="/*.htm" />
			<!-- 二级目录 -->
			<mvc:mapping path="/*/*.do" />
			<mvc:mapping path="/*/*.ajax" />
			<mvc:mapping path="/*/*.htm" />
			<!-- 需排除拦截的地址 -->
			<mvc:exclude-mapping path="/login.htm"/>
			<bean class="com.git.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<bean id="lifeCycleBean" class="com.git.bean.lifecycle.LifeCycleBean"
		init-method="inits" destroy-method="destroy">
		<property name="name" value="apple" />
	</bean>

	<!-- 配置初始化方法和销毁方法，但是如果要销毁方法生效scope="singleton" -->
	<bean id="person" class="com.git.bean.lifecycle.Person" scope="singleton"
		lazy-init="false" init-method="init" destroy-method="destory" />

	<!-- 配置初始化方法和销毁方法，但是如果要销毁方法生效scope="singleton" -->
	<bean id="person2" class="com.git.bean.lifecycle.Person2" scope="singleton"
		lazy-init="false" init-method="init" destroy-method="destory" />

	<!-- 数据库连接池配置==================================================================================== -->
	<!-- Spring创建数据连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>  
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/timesheet"/>
		<property name="username" value="root"/>  
		<property name="password" value="root"/>  
		<!--maxActive: 最大连接数量-->    
		<property name="maxActive" value="150"/>  
		<!--minIdle: 最小空闲连接-->    
		<property name="minIdle" value="5"/>  
		<!--maxIdle: 最大空闲连接-->    
		<property name="maxIdle" value="20"/>  
		<!--initialSize: 初始化连接-->    
		<property name="initialSize" value="30"/>  
		<!-- 连接被泄露时是否打印 -->  
		<property name="logAbandoned" value="true"/>  
		<!--removeAbandoned: 是否自动回收超时连接-->    
		<property name="removeAbandoned"  value="true"/>  
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->    
		<property name="removeAbandonedTimeout" value="10"/>  
		<!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->  
		<property name="maxWait" value="1000"/>  
		<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->  
		<property name="timeBetweenEvictionRunsMillis" value="10000"/>  
		<!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->  
		<property name="numTestsPerEvictionRun" value="10"/>  
		<!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->  
		<property name="minEvictableIdleTimeMillis" value="10000"/>  
		<property name="validationQuery" value="SELECT NOW() FROM DUAL"/> 
	</bean>

	<!-- 定时任务配置==================================================================================== -->
	<!-- 任务1配置 -->
	<bean name="job1" class="com.git.quartz.Job1Demo" />
	<bean id="jobDetail_1" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 执行的类 -->
		<property name="targetObject">
			<ref bean="job1" />
		</property>
		<!-- 类中的方法 -->
		<property name="targetMethod">
			<value>sayHello</value>
		</property>
	</bean>
	<bean id="cronTrigger_1" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="jobDetail_1" />
		</property>
		
		<property name="cronExpression">
		<!--<value>0/1 * * * * ?</value> --><!-- 每一秒钟执行一次 -->
			<value>0 0 12 * * ?</value> <!-- 每天12点 -->
		</property>
	</bean>
	<!-- 任务2配置 -->
	<bean name="job2" class="com.git.quartz.Job2Demo" />
	<bean id="jobDetail_2" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="job2" />
		</property>
		<property name="targetMethod">
			<value>sayHello</value>
		</property>
	</bean>
	<bean id="cronTrigger_2" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="jobDetail_2" />
		</property>
		<property name="cronExpression">
			<!--<value>0/1 * * * * ?</value> -->
			<value>0 0 12 * * ?</value> <!-- 每天12点 -->
		</property>
	</bean>
	<!-- 总配置 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- 添加触发器 -->
		<property name="triggers">
			<list>
				<ref bean="cronTrigger_1" />
				<ref bean="cronTrigger_2" />
			</list>
		</property>
	</bean>
</beans>